{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/philip/React-projects/RTKadmin/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/philip/React-projects/RTKadmin/src/screens/FeedbackScreen.js\";\n\nfunction _templateObject2() {\n  const data = _taggedTemplateLiteral([\"\\n  :hover {\\n    cursor: pointer;\\n    color: #3f51b5;\\n  }\\n\"]);\n\n  _templateObject2 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  padding-top: 56px;\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport * as R from 'ramda';\nimport { withProps, lifecycle, withHandlers, withStateHandlers } from 'recompose';\nimport styled from 'styled-components';\nimport { downloadFeedback } from '../utils';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport Button from '@material-ui/core/Button';\nimport { Grid } from '@material-ui/core';\nimport { AppBar, BaseTable, FeedbackInfo } from '../components/commons';\nconst ListGridItem = styled(Grid).attrs({\n  item: true,\n  xs: 12\n})(_templateObject());\nconst IdTableCell = styled(TableCell)(_templateObject2());\n\nconst FeedbackRow = ({\n  id,\n  title,\n  message,\n  user,\n  onPress\n}) => React.createElement(TableRow, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 35\n  },\n  __self: this\n}, React.createElement(IdTableCell, {\n  onClick: onPress,\n  children: id,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 36\n  },\n  __self: this\n}), React.createElement(TableCell, {\n  children: user || '  Неизвестно',\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 37\n  },\n  __self: this\n}), React.createElement(TableCell, {\n  children: title,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 38\n  },\n  __self: this\n}), React.createElement(TableCell, {\n  children: message && message.length > 100 ? R.slice(0, 100, message) + '...' : message,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 39\n  },\n  __self: this\n}));\n\nconst FeedbackScreen = R.compose(lifecycle({\n  componentDidMount() {\n    this.props.requestFeedback();\n  }\n\n}), withStateHandlers({\n  isModalOpen: false,\n  selectedFeedback: null\n}, {\n  selectFeedback: () => feedback => ({\n    isModalOpen: true,\n    selectedFeedback: feedback\n  }),\n  closeModal: () => () => ({\n    isModalOpen: false\n  })\n}), withHandlers({\n  download: () => downloadFeedback,\n  onItemPress: ({\n    selectFeedback\n  }) => feedback => selectFeedback(feedback)\n}), withProps(({\n  feedback,\n  onItemPress\n}) => ({\n  rows: feedback.map(fb => React.createElement(FeedbackRow, Object.assign({\n    onPress: () => onItemPress(fb),\n    key: fb.id\n  }, fb, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  })))\n})))(({\n  rows,\n  download,\n  isModalOpen,\n  selectedFeedback,\n  closeModal\n}) => React.createElement(React.Fragment, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 76\n  },\n  __self: this\n}, React.createElement(Grid, {\n  container: true,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 77\n  },\n  __self: this\n}, React.createElement(Grid, {\n  item: true,\n  xs: 12,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 78\n  },\n  __self: this\n}, React.createElement(AppBar, {\n  position: \"fixed\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 79\n  },\n  __self: this\n})), React.createElement(ListGridItem, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 81\n  },\n  __self: this\n}, React.createElement(BaseTable, {\n  headerNames: [{\n    name: 'id',\n    cellStyle: {\n      width: 10,\n      paddingRight: 0\n    }\n  }, {\n    name: 'Пользователь',\n    cellStyle: {\n      width: 100,\n      paddingRight: 24\n    }\n  }, {\n    name: 'Название',\n    cellStyle: {\n      width: 200,\n      paddingRight: 24\n    }\n  }, {\n    name: 'Текст'\n  }],\n  rows: rows,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 82\n  },\n  __self: this\n})), React.createElement(Button, {\n  onClick: download,\n  style: {\n    backgroundColor: '#3f51b5',\n    color: 'white'\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 95\n  },\n  __self: this\n}, \"\\u0421\\u043A\\u0430\\u0447\\u0430\\u0442\\u044C \\u0442\\u0430\\u0431\\u043B\\u0438\\u0446\\u0443\")), isModalOpen && React.createElement(FeedbackInfo, Object.assign({}, selectedFeedback, {\n  onClose: closeModal,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 102\n  },\n  __self: this\n}))));\nexport default FeedbackScreen;","map":{"version":3,"sources":["/Users/philip/React-projects/RTKadmin/src/screens/FeedbackScreen.js"],"names":["React","R","withProps","lifecycle","withHandlers","withStateHandlers","styled","downloadFeedback","TableRow","TableCell","Button","Grid","AppBar","BaseTable","FeedbackInfo","ListGridItem","attrs","item","xs","IdTableCell","FeedbackRow","id","title","message","user","onPress","length","slice","FeedbackScreen","compose","componentDidMount","props","requestFeedback","isModalOpen","selectedFeedback","selectFeedback","feedback","closeModal","download","onItemPress","rows","map","fb","name","cellStyle","width","paddingRight","backgroundColor","color"],"mappings":"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","sourcesContent":["import React from 'react'\nimport * as R from 'ramda'\nimport {\n  withProps,\n  lifecycle,\n  withHandlers,\n  withStateHandlers,\n} from 'recompose'\nimport styled from 'styled-components'\n\nimport { downloadFeedback } from '../utils'\n\nimport TableRow from '@material-ui/core/TableRow'\nimport TableCell from '@material-ui/core/TableCell'\nimport Button from '@material-ui/core/Button'\nimport { Grid } from '@material-ui/core'\n\nimport { AppBar, BaseTable, FeedbackInfo } from '../components/commons'\n\nconst ListGridItem = styled(Grid).attrs({\n  item: true,\n  xs: 12,\n})`\n  padding-top: 56px;\n`\n\nconst IdTableCell = styled(TableCell)`\n  :hover {\n    cursor: pointer;\n    color: #3f51b5;\n  }\n`\n\nconst FeedbackRow = ({ id, title, message, user, onPress }) => (\n  <TableRow>\n    <IdTableCell onClick={onPress} children={id} />\n    <TableCell children={user || '  Неизвестно'} />\n    <TableCell children={title} />\n    <TableCell\n      children={\n        message && message.length > 100\n          ? R.slice(0, 100, message) + '...'\n          : message\n      }\n    />\n  </TableRow>\n)\n\nconst FeedbackScreen = R.compose(\n  lifecycle({\n    componentDidMount() {\n      this.props.requestFeedback()\n    },\n  }),\n  withStateHandlers(\n    { isModalOpen: false, selectedFeedback: null },\n    {\n      selectFeedback: () => feedback => ({\n        isModalOpen: true,\n        selectedFeedback: feedback,\n      }),\n      closeModal: () => () => ({ isModalOpen: false }),\n    },\n  ),\n  withHandlers({\n    download: () => downloadFeedback,\n    onItemPress: ({ selectFeedback }) => feedback => selectFeedback(feedback),\n  }),\n\n  withProps(({ feedback, onItemPress }) => ({\n    rows: feedback.map(fb => (\n      <FeedbackRow onPress={() => onItemPress(fb)} key={fb.id} {...fb} />\n    )),\n  })),\n)(({ rows, download, isModalOpen, selectedFeedback, closeModal }) => (\n  <React.Fragment>\n    <Grid container>\n      <Grid item xs={12}>\n        <AppBar position=\"fixed\" />\n      </Grid>\n      <ListGridItem>\n        <BaseTable\n          headerNames={[\n            { name: 'id', cellStyle: { width: 10, paddingRight: 0 } },\n            {\n              name: 'Пользователь',\n              cellStyle: { width: 100, paddingRight: 24 },\n            },\n            { name: 'Название', cellStyle: { width: 200, paddingRight: 24 } },\n            { name: 'Текст' },\n          ]}\n          rows={rows}\n        />\n      </ListGridItem>\n      <Button\n        onClick={download}\n        style={{ backgroundColor: '#3f51b5', color: 'white' }}\n      >\n        Скачать таблицу\n      </Button>\n    </Grid>\n    {isModalOpen && <FeedbackInfo {...selectedFeedback} onClose={closeModal} />}\n  </React.Fragment>\n))\n\nexport default FeedbackScreen\n"]},"metadata":{},"sourceType":"module"}