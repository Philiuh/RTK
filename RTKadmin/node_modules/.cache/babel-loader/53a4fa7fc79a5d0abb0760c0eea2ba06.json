{"ast":null,"code":"var _jsxFileName = \"/Users/philip/React-projects/RTKadmin/src/components/posts/PostsList.js\";\nimport React from 'react';\nimport * as R from 'ramda';\nimport { withHandlers, withState, withProps } from 'recompose';\nimport PostItem from './PostItem';\nimport { BaseTable } from '../commons';\nimport { Player } from '../../services';\nconst PostsList = R.compose(withState('currentTrack', 'setCurrentTrack', null), withHandlers({\n  togglePlay: ({\n    currentTrack,\n    setCurrentTrack,\n    posts\n  }) => postId => {\n    if (currentTrack !== postId || Player.paused) {\n      const _posts$find = posts.find(({\n        id\n      }) => id === postId),\n            url = _posts$find.url;\n\n      if (Player.src !== url) {\n        Player.src = url;\n      }\n\n      Player.play();\n      setCurrentTrack(postId);\n    } else {\n      Player.pause();\n      setCurrentTrack(null);\n    }\n  },\n  onUpdatePress: ({\n    selectPost,\n    openUpdateModal\n  }) => id => {\n    selectPost(id);\n    openUpdateModal();\n  }\n}), withProps(({\n  posts,\n  togglePlay,\n  currentTrack,\n  removePost,\n  onUpdatePress\n}) => ({\n  rows: posts.map(post => React.createElement(PostItem, Object.assign({}, post, {\n    key: post.id,\n    onPlay: togglePlay,\n    isPlaying: currentTrack === post.id,\n    onRemove: removePost,\n    onUpdatePress: onUpdatePress,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  })))\n})))(({\n  rows\n}) => React.createElement(BaseTable, {\n  headerNames: [{\n    name: 'id'\n  }, {\n    name: 'Название'\n  }, {\n    name: 'Проигрыватель'\n  }, {\n    name: ' Тэги'\n  }, {\n    name: 'Изображение'\n  }, {\n    name: ''\n  }, {\n    name: ''\n  }],\n  rows: rows,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 45\n  },\n  __self: this\n}));\nexport default PostsList;","map":{"version":3,"sources":["/Users/philip/React-projects/RTKadmin/src/components/posts/PostsList.js"],"names":["React","R","withHandlers","withState","withProps","PostItem","BaseTable","Player","PostsList","compose","togglePlay","currentTrack","setCurrentTrack","posts","postId","paused","find","id","url","src","play","pause","onUpdatePress","selectPost","openUpdateModal","removePost","rows","map","post","name"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,CAAZ,MAAmB,OAAnB;AACA,SAASC,YAAT,EAAuBC,SAAvB,EAAkCC,SAAlC,QAAmD,WAAnD;AAEA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,SAAT,QAA0B,YAA1B;AACA,SAASC,MAAT,QAAuB,gBAAvB;AAEA,MAAMC,SAAS,GAAGP,CAAC,CAACQ,OAAF,CAChBN,SAAS,CAAC,cAAD,EAAiB,iBAAjB,EAAoC,IAApC,CADO,EAEhBD,YAAY,CAAC;AACXQ,EAAAA,UAAU,EAAE,CAAC;AAAEC,IAAAA,YAAF;AAAgBC,IAAAA,eAAhB;AAAiCC,IAAAA;AAAjC,GAAD,KAA8CC,MAAM,IAAI;AAClE,QAAIH,YAAY,KAAKG,MAAjB,IAA2BP,MAAM,CAACQ,MAAtC,EAA8C;AAAA,0BAC5BF,KAAK,CAACG,IAAN,CAAW,CAAC;AAAEC,QAAAA;AAAF,OAAD,KAAYA,EAAE,KAAKH,MAA9B,CAD4B;AAAA,YACpCI,GADoC,eACpCA,GADoC;;AAE5C,UAAIX,MAAM,CAACY,GAAP,KAAeD,GAAnB,EAAwB;AACtBX,QAAAA,MAAM,CAACY,GAAP,GAAaD,GAAb;AACD;;AACDX,MAAAA,MAAM,CAACa,IAAP;AACAR,MAAAA,eAAe,CAACE,MAAD,CAAf;AACD,KAPD,MAOO;AACLP,MAAAA,MAAM,CAACc,KAAP;AACAT,MAAAA,eAAe,CAAC,IAAD,CAAf;AACD;AACF,GAbU;AAcXU,EAAAA,aAAa,EAAE,CAAC;AAAEC,IAAAA,UAAF;AAAcC,IAAAA;AAAd,GAAD,KAAqCP,EAAE,IAAI;AACxDM,IAAAA,UAAU,CAACN,EAAD,CAAV;AACAO,IAAAA,eAAe;AAChB;AAjBU,CAAD,CAFI,EAqBhBpB,SAAS,CACP,CAAC;AAAES,EAAAA,KAAF;AAASH,EAAAA,UAAT;AAAqBC,EAAAA,YAArB;AAAmCc,EAAAA,UAAnC;AAA+CH,EAAAA;AAA/C,CAAD,MAAqE;AACnEI,EAAAA,IAAI,EAAEb,KAAK,CAACc,GAAN,CAAUC,IAAI,IAClB,oBAAC,QAAD,oBACMA,IADN;AAEE,IAAA,GAAG,EAAEA,IAAI,CAACX,EAFZ;AAGE,IAAA,MAAM,EAAEP,UAHV;AAIE,IAAA,SAAS,EAAEC,YAAY,KAAKiB,IAAI,CAACX,EAJnC;AAKE,IAAA,QAAQ,EAAEQ,UALZ;AAME,IAAA,aAAa,EAAEH,aANjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADI;AAD6D,CAArE,CADO,CArBO,EAmChB,CAAC;AAAEI,EAAAA;AAAF,CAAD,KACA,oBAAC,SAAD;AACE,EAAA,WAAW,EAAE,CACX;AAAEG,IAAAA,IAAI,EAAE;AAAR,GADW,EAEX;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAFW,EAGX;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAHW,EAIX;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAJW,EAKX;AAAEA,IAAAA,IAAI,EAAE;AAAR,GALW,EAMX;AAAEA,IAAAA,IAAI,EAAE;AAAR,GANW,EAOX;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAPW,CADf;AAUE,EAAA,IAAI,EAAEH,IAVR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EApCgB,CAAlB;AAkDA,eAAelB,SAAf","sourcesContent":["import React from 'react'\nimport * as R from 'ramda'\nimport { withHandlers, withState, withProps } from 'recompose'\n\nimport PostItem from './PostItem'\nimport { BaseTable } from '../commons'\nimport { Player } from '../../services'\n\nconst PostsList = R.compose(\n  withState('currentTrack', 'setCurrentTrack', null),\n  withHandlers({\n    togglePlay: ({ currentTrack, setCurrentTrack, posts }) => postId => {\n      if (currentTrack !== postId || Player.paused) {\n        const { url } = posts.find(({ id }) => id === postId)\n        if (Player.src !== url) {\n          Player.src = url\n        }\n        Player.play()\n        setCurrentTrack(postId)\n      } else {\n        Player.pause()\n        setCurrentTrack(null)\n      }\n    },\n    onUpdatePress: ({ selectPost, openUpdateModal }) => id => {\n      selectPost(id)\n      openUpdateModal()\n    },\n  }),\n  withProps(\n    ({ posts, togglePlay, currentTrack, removePost, onUpdatePress }) => ({\n      rows: posts.map(post => (\n        <PostItem\n          {...post}\n          key={post.id}\n          onPlay={togglePlay}\n          isPlaying={currentTrack === post.id}\n          onRemove={removePost}\n          onUpdatePress={onUpdatePress}\n        />\n      )),\n    }),\n  ),\n)(({ rows }) => (\n  <BaseTable\n    headerNames={[\n      { name: 'id' },\n      { name: 'Название' },\n      { name: 'Проигрыватель' },\n      { name: ' Тэги' },\n      { name: 'Изображение' },\n      { name: '' },\n      { name: '' },\n    ]}\n    rows={rows}\n  />\n))\n\nexport default PostsList\n"]},"metadata":{},"sourceType":"module"}