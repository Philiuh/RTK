{"ast":null,"code":"import { call, put } from 'redux-saga/effects';\nimport { BadRequestError, ServerError } from './errors';\n\nconst handleErrors = ({\n  badRequestActionCreator,\n  serverErrorActionCreator,\n  anyErrorActionCreator,\n  networkErrorActionCreator\n} = {}) => saga => function* (...args) {\n  try {\n    yield call(saga, ...args);\n  } catch (e) {\n    if (anyErrorActionCreator) {\n      yield call(putActions, anyErrorActionCreator, ...args);\n    }\n\n    if (e instanceof BadRequestError && badRequestActionCreator) {\n      yield call(putActions, badRequestActionCreator, e.errors, ...args);\n      return;\n    }\n\n    if (e instanceof ServerError && serverErrorActionCreator) {\n      yield call(putActions, serverErrorActionCreator, e.errors, ...args);\n      return;\n    }\n\n    if (e.message.indexOf('Network request failed') !== -1) {\n      yield call(putActions, networkErrorActionCreator, ...args);\n      yield put(networkErrorActionCreator(...args));\n      return;\n    } // TODO: Remove in production\n    // eslint-disable-next-line\n\n\n    console.error('Saga error: ', e.message);\n  }\n};\n\nconst putActions = function* (actionCreators, ...args) {\n  if (Array.isArray(actionCreators)) {\n    for (const actionCreator of actionCreators) {\n      yield put(actionCreator(...args));\n    }\n  } else {\n    yield put(actionCreators(...args));\n  }\n};\n\nexport default handleErrors;","map":{"version":3,"sources":["/Users/philip/React-projects/RTKadmin/src/aspects/handleErrors.js"],"names":["call","put","BadRequestError","ServerError","handleErrors","badRequestActionCreator","serverErrorActionCreator","anyErrorActionCreator","networkErrorActionCreator","saga","args","e","putActions","errors","message","indexOf","console","error","actionCreators","Array","isArray","actionCreator"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,QAA0B,oBAA1B;AACA,SAASC,eAAT,EAA0BC,WAA1B,QAA6C,UAA7C;;AAEA,MAAMC,YAAY,GAAG,CAAC;AACpBC,EAAAA,uBADoB;AAEpBC,EAAAA,wBAFoB;AAGpBC,EAAAA,qBAHoB;AAIpBC,EAAAA;AAJoB,IAKlB,EALiB,KAKVC,IAAI,IACb,WAAU,GAAGC,IAAb,EAAmB;AACjB,MAAI;AACF,UAAMV,IAAI,CAACS,IAAD,EAAO,GAAGC,IAAV,CAAV;AACD,GAFD,CAEE,OAAOC,CAAP,EAAU;AACV,QAAIJ,qBAAJ,EAA2B;AACzB,YAAMP,IAAI,CAACY,UAAD,EAAaL,qBAAb,EAAoC,GAAGG,IAAvC,CAAV;AACD;;AAED,QAAIC,CAAC,YAAYT,eAAb,IAAgCG,uBAApC,EAA6D;AAC3D,YAAML,IAAI,CAACY,UAAD,EAAaP,uBAAb,EAAsCM,CAAC,CAACE,MAAxC,EAAgD,GAAGH,IAAnD,CAAV;AACA;AACD;;AACD,QAAIC,CAAC,YAAYR,WAAb,IAA4BG,wBAAhC,EAA0D;AACxD,YAAMN,IAAI,CAACY,UAAD,EAAaN,wBAAb,EAAuCK,CAAC,CAACE,MAAzC,EAAiD,GAAGH,IAApD,CAAV;AACA;AACD;;AACD,QAAIC,CAAC,CAACG,OAAF,CAAUC,OAAV,CAAkB,wBAAlB,MAAgD,CAAC,CAArD,EAAwD;AACtD,YAAMf,IAAI,CAACY,UAAD,EAAaJ,yBAAb,EAAwC,GAAGE,IAA3C,CAAV;AACA,YAAMT,GAAG,CAACO,yBAAyB,CAAC,GAAGE,IAAJ,CAA1B,CAAT;AACA;AACD,KAjBS,CAkBV;AACA;;;AACAM,IAAAA,OAAO,CAACC,KAAR,CAAc,cAAd,EAA8BN,CAAC,CAACG,OAAhC;AACD;AACF,CA/BH;;AAiCA,MAAMF,UAAU,GAAG,WAAUM,cAAV,EAA0B,GAAGR,IAA7B,EAAmC;AACpD,MAAIS,KAAK,CAACC,OAAN,CAAcF,cAAd,CAAJ,EAAmC;AACjC,SAAK,MAAMG,aAAX,IAA4BH,cAA5B,EAA4C;AAC1C,YAAMjB,GAAG,CAACoB,aAAa,CAAC,GAAGX,IAAJ,CAAd,CAAT;AACD;AACF,GAJD,MAIO;AACL,UAAMT,GAAG,CAACiB,cAAc,CAAC,GAAGR,IAAJ,CAAf,CAAT;AACD;AACF,CARD;;AAUA,eAAeN,YAAf","sourcesContent":["import { call, put } from 'redux-saga/effects'\nimport { BadRequestError, ServerError } from './errors'\n\nconst handleErrors = ({\n  badRequestActionCreator,\n  serverErrorActionCreator,\n  anyErrorActionCreator,\n  networkErrorActionCreator,\n} = {}) => saga =>\n  function*(...args) {\n    try {\n      yield call(saga, ...args)\n    } catch (e) {\n      if (anyErrorActionCreator) {\n        yield call(putActions, anyErrorActionCreator, ...args)\n      }\n\n      if (e instanceof BadRequestError && badRequestActionCreator) {\n        yield call(putActions, badRequestActionCreator, e.errors, ...args)\n        return\n      }\n      if (e instanceof ServerError && serverErrorActionCreator) {\n        yield call(putActions, serverErrorActionCreator, e.errors, ...args)\n        return\n      }\n      if (e.message.indexOf('Network request failed') !== -1) {\n        yield call(putActions, networkErrorActionCreator, ...args)\n        yield put(networkErrorActionCreator(...args))\n        return\n      }\n      // TODO: Remove in production\n      // eslint-disable-next-line\n      console.error('Saga error: ', e.message)\n    }\n  }\n\nconst putActions = function*(actionCreators, ...args) {\n  if (Array.isArray(actionCreators)) {\n    for (const actionCreator of actionCreators) {\n      yield put(actionCreator(...args))\n    }\n  } else {\n    yield put(actionCreators(...args))\n  }\n}\n\nexport default handleErrors\n"]},"metadata":{},"sourceType":"module"}