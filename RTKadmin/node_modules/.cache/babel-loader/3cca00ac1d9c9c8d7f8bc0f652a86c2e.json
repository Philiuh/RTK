{"ast":null,"code":"import { all, call, put, takeLatest } from 'redux-saga/effects';\nimport * as AuthRepository from './AuthRepository';\nimport * as AuthManager from './AuthManager';\nimport { setToken, CHECK_TOKEN, SIGNIN, SIGNOUT } from './duck';\nimport { startSubmit, stopSubmit } from 'redux-form';\nimport { FORMS } from '../../constants';\nimport { handleErrors } from '../../aspects';\nimport { navigate } from '../navigation';\n\nconst checkToken = function* () {\n  const token = yield call(AuthRepository.getToken);\n\n  if (token) {\n    yield put(setToken(token));\n  } else {\n    yield put(setToken(''));\n  }\n};\n\nconst signin = handleErrors({\n  badRequestActionCreator: errors => errors ? stopSubmit(FORMS.SIGNIN, errors) : stopSubmit(FORMS.SIGNIN, {\n    username: 'Неверное имя пользователя или пароль'\n  })\n})(function* ({\n  payload: user\n}) {\n  yield put(startSubmit(FORMS.SIGNIN));\n  const token = yield call(AuthManager.signin, user);\n  yield put(setToken(token));\n  yield call(AuthRepository.setToken, token);\n  yield put(stopSubmit(FORMS.SIGNIN));\n  yield put(navigate('/posts'));\n});\n\nconst signout = function* () {\n  yield call(AuthRepository.removeToken);\n  yield put(setToken(''));\n  yield put(navigate('/signin'));\n};\n\nconst authSaga = function* () {\n  yield all([takeLatest(CHECK_TOKEN, checkToken), takeLatest(SIGNIN, signin), takeLatest(SIGNOUT, signout)]);\n};\n\nexport default authSaga;","map":{"version":3,"sources":["/Users/philip/React-projects/RTKadmin/src/modules/auth/sagas.js"],"names":["all","call","put","takeLatest","AuthRepository","AuthManager","setToken","CHECK_TOKEN","SIGNIN","SIGNOUT","startSubmit","stopSubmit","FORMS","handleErrors","navigate","checkToken","token","getToken","signin","badRequestActionCreator","errors","username","payload","user","signout","removeToken","authSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,UAAzB,QAA2C,oBAA3C;AACA,OAAO,KAAKC,cAAZ,MAAgC,kBAAhC;AACA,OAAO,KAAKC,WAAZ,MAA6B,eAA7B;AACA,SAASC,QAAT,EAAmBC,WAAnB,EAAgCC,MAAhC,EAAwCC,OAAxC,QAAuD,QAAvD;AACA,SAASC,WAAT,EAAsBC,UAAtB,QAAwC,YAAxC;AACA,SAASC,KAAT,QAAsB,iBAAtB;AACA,SAASC,YAAT,QAA6B,eAA7B;AACA,SAASC,QAAT,QAAyB,eAAzB;;AAEA,MAAMC,UAAU,GAAG,aAAY;AAC7B,QAAMC,KAAK,GAAG,MAAMf,IAAI,CAACG,cAAc,CAACa,QAAhB,CAAxB;;AACA,MAAID,KAAJ,EAAW;AACT,UAAMd,GAAG,CAACI,QAAQ,CAACU,KAAD,CAAT,CAAT;AACD,GAFD,MAEO;AACL,UAAMd,GAAG,CAACI,QAAQ,CAAC,EAAD,CAAT,CAAT;AACD;AACF,CAPD;;AASA,MAAMY,MAAM,GAAGL,YAAY,CAAC;AAC1BM,EAAAA,uBAAuB,EAAEC,MAAM,IAC7BA,MAAM,GACFT,UAAU,CAACC,KAAK,CAACJ,MAAP,EAAeY,MAAf,CADR,GAEFT,UAAU,CAACC,KAAK,CAACJ,MAAP,EAAe;AACvBa,IAAAA,QAAQ,EAAE;AADa,GAAf;AAJU,CAAD,CAAZ,CAOZ,WAAU;AAAEC,EAAAA,OAAO,EAAEC;AAAX,CAAV,EAA6B;AAC9B,QAAMrB,GAAG,CAACQ,WAAW,CAACE,KAAK,CAACJ,MAAP,CAAZ,CAAT;AACA,QAAMQ,KAAK,GAAG,MAAMf,IAAI,CAACI,WAAW,CAACa,MAAb,EAAqBK,IAArB,CAAxB;AACA,QAAMrB,GAAG,CAACI,QAAQ,CAACU,KAAD,CAAT,CAAT;AACA,QAAMf,IAAI,CAACG,cAAc,CAACE,QAAhB,EAA0BU,KAA1B,CAAV;AACA,QAAMd,GAAG,CAACS,UAAU,CAACC,KAAK,CAACJ,MAAP,CAAX,CAAT;AACA,QAAMN,GAAG,CAACY,QAAQ,CAAC,QAAD,CAAT,CAAT;AACD,CAdc,CAAf;;AAgBA,MAAMU,OAAO,GAAG,aAAY;AAC1B,QAAMvB,IAAI,CAACG,cAAc,CAACqB,WAAhB,CAAV;AACA,QAAMvB,GAAG,CAACI,QAAQ,CAAC,EAAD,CAAT,CAAT;AACA,QAAMJ,GAAG,CAACY,QAAQ,CAAC,SAAD,CAAT,CAAT;AACD,CAJD;;AAMA,MAAMY,QAAQ,GAAG,aAAY;AAC3B,QAAM1B,GAAG,CAAC,CACRG,UAAU,CAACI,WAAD,EAAcQ,UAAd,CADF,EAERZ,UAAU,CAACK,MAAD,EAASU,MAAT,CAFF,EAGRf,UAAU,CAACM,OAAD,EAAUe,OAAV,CAHF,CAAD,CAAT;AAKD,CAND;;AAQA,eAAeE,QAAf","sourcesContent":["import { all, call, put, takeLatest } from 'redux-saga/effects'\nimport * as AuthRepository from './AuthRepository'\nimport * as AuthManager from './AuthManager'\nimport { setToken, CHECK_TOKEN, SIGNIN, SIGNOUT } from './duck'\nimport { startSubmit, stopSubmit } from 'redux-form'\nimport { FORMS } from '../../constants'\nimport { handleErrors } from '../../aspects'\nimport { navigate } from '../navigation'\n\nconst checkToken = function*() {\n  const token = yield call(AuthRepository.getToken)\n  if (token) {\n    yield put(setToken(token))\n  } else {\n    yield put(setToken(''))\n  }\n}\n\nconst signin = handleErrors({\n  badRequestActionCreator: errors =>\n    errors\n      ? stopSubmit(FORMS.SIGNIN, errors)\n      : stopSubmit(FORMS.SIGNIN, {\n          username: 'Неверное имя пользователя или пароль',\n        }),\n})(function*({ payload: user }) {\n  yield put(startSubmit(FORMS.SIGNIN))\n  const token = yield call(AuthManager.signin, user)\n  yield put(setToken(token))\n  yield call(AuthRepository.setToken, token)\n  yield put(stopSubmit(FORMS.SIGNIN))\n  yield put(navigate('/posts'))\n})\n\nconst signout = function*() {\n  yield call(AuthRepository.removeToken)\n  yield put(setToken(''))\n  yield put(navigate('/signin'))\n}\n\nconst authSaga = function*() {\n  yield all([\n    takeLatest(CHECK_TOKEN, checkToken),\n    takeLatest(SIGNIN, signin),\n    takeLatest(SIGNOUT, signout),\n  ])\n}\n\nexport default authSaga\n"]},"metadata":{},"sourceType":"module"}