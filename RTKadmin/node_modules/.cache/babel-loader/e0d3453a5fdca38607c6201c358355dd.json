{"ast":null,"code":"import * as R from 'ramda';\nimport { BadRequestError, ServerError } from './errors';\n\nconst handleStatuses = ({\n  shouldParse400,\n  shouldParse401,\n  shouldParse500\n} = {}) => R.cond([[R.propEq('status', 400), R.pipeP(x => shouldParse400 ? x.json() : Promise.resolve(), x => Promise.reject(new BadRequestError('', x)))], [R.propEq('status', 401), R.pipeP(x => shouldParse401 ? x.json() : Promise.resolve(), x => Promise.reject(new BadRequestError('', x)))], [R.propEq('status', 500), R.pipeP(x => shouldParse500 ? x.json() : Promise.resolve(), x => Promise.reject(new ServerError('', x)))], [R.T, R.identity]]);\n\nexport default handleStatuses;","map":{"version":3,"sources":["/Users/philip/React-projects/RTKadmin/src/aspects/handleStatuses.js"],"names":["R","BadRequestError","ServerError","handleStatuses","shouldParse400","shouldParse401","shouldParse500","cond","propEq","pipeP","x","json","Promise","resolve","reject","T","identity"],"mappings":"AAAA,OAAO,KAAKA,CAAZ,MAAmB,OAAnB;AACA,SAASC,eAAT,EAA0BC,WAA1B,QAA6C,UAA7C;;AAEA,MAAMC,cAAc,GAAG,CAAC;AACtBC,EAAAA,cADsB;AAEtBC,EAAAA,cAFsB;AAGtBC,EAAAA;AAHsB,IAIpB,EAJmB,KAKrBN,CAAC,CAACO,IAAF,CAAO,CACL,CACEP,CAAC,CAACQ,MAAF,CAAS,QAAT,EAAmB,GAAnB,CADF,EAEER,CAAC,CAACS,KAAF,CACEC,CAAC,IAAKN,cAAc,GAAGM,CAAC,CAACC,IAAF,EAAH,GAAcC,OAAO,CAACC,OAAR,EADpC,EAEEH,CAAC,IAAIE,OAAO,CAACE,MAAR,CAAe,IAAIb,eAAJ,CAAoB,EAApB,EAAwBS,CAAxB,CAAf,CAFP,CAFF,CADK,EAQL,CACEV,CAAC,CAACQ,MAAF,CAAS,QAAT,EAAmB,GAAnB,CADF,EAEER,CAAC,CAACS,KAAF,CACEC,CAAC,IAAKL,cAAc,GAAGK,CAAC,CAACC,IAAF,EAAH,GAAcC,OAAO,CAACC,OAAR,EADpC,EAEEH,CAAC,IAAIE,OAAO,CAACE,MAAR,CAAe,IAAIb,eAAJ,CAAoB,EAApB,EAAwBS,CAAxB,CAAf,CAFP,CAFF,CARK,EAeL,CACEV,CAAC,CAACQ,MAAF,CAAS,QAAT,EAAmB,GAAnB,CADF,EAEER,CAAC,CAACS,KAAF,CACEC,CAAC,IAAKJ,cAAc,GAAGI,CAAC,CAACC,IAAF,EAAH,GAAcC,OAAO,CAACC,OAAR,EADpC,EAEEH,CAAC,IAAIE,OAAO,CAACE,MAAR,CAAe,IAAIZ,WAAJ,CAAgB,EAAhB,EAAoBQ,CAApB,CAAf,CAFP,CAFF,CAfK,EAsBL,CAACV,CAAC,CAACe,CAAH,EAAMf,CAAC,CAACgB,QAAR,CAtBK,CAAP,CALF;;AA8BA,eAAeb,cAAf","sourcesContent":["import * as R from 'ramda'\nimport { BadRequestError, ServerError } from './errors'\n\nconst handleStatuses = ({\n  shouldParse400,\n  shouldParse401,\n  shouldParse500,\n} = {}) =>\n  R.cond([\n    [\n      R.propEq('status', 400),\n      R.pipeP(\n        x => (shouldParse400 ? x.json() : Promise.resolve()),\n        x => Promise.reject(new BadRequestError('', x)),\n      ),\n    ],\n    [\n      R.propEq('status', 401),\n      R.pipeP(\n        x => (shouldParse401 ? x.json() : Promise.resolve()),\n        x => Promise.reject(new BadRequestError('', x)),\n      ),\n    ],\n    [\n      R.propEq('status', 500),\n      R.pipeP(\n        x => (shouldParse500 ? x.json() : Promise.resolve()),\n        x => Promise.reject(new ServerError('', x)),\n      ),\n    ],\n    [R.T, R.identity],\n  ])\n\nexport default handleStatuses\n"]},"metadata":{},"sourceType":"module"}