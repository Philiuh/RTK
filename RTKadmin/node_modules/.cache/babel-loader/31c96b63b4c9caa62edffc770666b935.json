{"ast":null,"code":"import _defineProperty from \"/Users/philip/React-projects/RTKadmin/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { call, put, all, takeLatest, select } from 'redux-saga/effects';\nimport { REQUEST_POSTS, setPosts, REMOVE_POST, CREATE_POST, UPDATE_POST } from './duck';\nimport * as PostsManager from './PostsManager';\nimport { getToken } from '../auth';\nimport { handleErrors } from '../../aspects';\nimport * as R from 'ramda';\nimport { stopSubmit, startSubmit } from 'redux-form';\nimport { FORMS } from '../../constants';\nimport { delayError } from '../errors';\n\nconst createPostFormData = post => {\n  const data = new FormData();\n  data.append('title', post.title);\n  R.forEach(x => data.append('tags[]', x), post.tags);\n  post.file && data.append('file', post.file);\n  post.image && data.append('file', post.image);\n  data.append('time', post.time);\n  post.id && data.append('id', post.id);\n  return data;\n};\n\nconst requestPosts = handleErrors({\n  anyErrorActionCreator: () => delayError({\n    error: 'Ошибка соединения',\n    time: 5000\n  })\n})(function* () {\n  const token = yield select(getToken);\n  const posts = yield call(PostsManager.getPosts, token);\n  yield put(setPosts(posts));\n});\nconst removePost = handleErrors({\n  anyErrorActionCreator: () => delayError({\n    error: 'Ошибка соединения',\n    time: 5000\n  })\n})(function* ({\n  payload: id\n}) {\n  const token = yield select(getToken);\n  yield call(PostsManager.removePost, token, id);\n  const posts = yield call(PostsManager.getPosts, token);\n  yield put(setPosts(posts));\n});\nconst createPost = handleErrors({\n  badRequestActionCreator: R.pipe(x => _objectSpread({}, x, {\n    file: x.mimetype\n  }), errors => stopSubmit(FORMS.POST, errors))\n})(function* ({\n  payload: post\n}) {\n  const token = yield select(getToken);\n  yield call(PostsManager.savePost, token, createPostFormData(post));\n  const posts = yield call(PostsManager.getPosts, token);\n  yield put(setPosts(posts));\n});\nconst updatePost = handleErrors({\n  badRequestActionCreator: R.pipe(x => _objectSpread({}, x, {\n    file: x.mimetype\n  }), errors => stopSubmit(FORMS.POST, errors))\n})(function* ({\n  payload: post\n}) {\n  const token = yield select(getToken);\n  yield put(startSubmit(FORMS.POST));\n  yield call(PostsManager.updatePost, token, createPostFormData(post));\n  const posts = yield call(PostsManager.getPosts, token);\n  yield put(setPosts(posts));\n  yield put(stopSubmit(FORMS.POST));\n});\n\nconst posts = function* () {\n  yield all([takeLatest(REQUEST_POSTS, requestPosts), takeLatest(REMOVE_POST, removePost), takeLatest(CREATE_POST, createPost), takeLatest(UPDATE_POST, updatePost)]);\n};\n\nexport default posts;","map":{"version":3,"sources":["/Users/philip/React-projects/RTKadmin/src/modules/posts/sagas.js"],"names":["call","put","all","takeLatest","select","REQUEST_POSTS","setPosts","REMOVE_POST","CREATE_POST","UPDATE_POST","PostsManager","getToken","handleErrors","R","stopSubmit","startSubmit","FORMS","delayError","createPostFormData","post","data","FormData","append","title","forEach","x","tags","file","image","time","id","requestPosts","anyErrorActionCreator","error","token","posts","getPosts","removePost","payload","createPost","badRequestActionCreator","pipe","mimetype","errors","POST","savePost","updatePost"],"mappings":"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","sourcesContent":["import { call, put, all, takeLatest, select } from 'redux-saga/effects'\nimport {\n  REQUEST_POSTS,\n  setPosts,\n  REMOVE_POST,\n  CREATE_POST,\n  UPDATE_POST,\n} from './duck'\nimport * as PostsManager from './PostsManager'\nimport { getToken } from '../auth'\nimport { handleErrors } from '../../aspects'\nimport * as R from 'ramda'\nimport { stopSubmit, startSubmit } from 'redux-form'\nimport { FORMS } from '../../constants'\nimport { delayError } from '../errors'\n\nconst createPostFormData = post => {\n  const data = new FormData()\n\n  data.append('title', post.title)\n  R.forEach(x => data.append('tags[]', x), post.tags)\n  post.file && data.append('file', post.file)\n  post.image && data.append('file', post.image)\n  data.append('time', post.time)\n  post.id && data.append('id', post.id)\n\n  return data\n}\n\nconst requestPosts = handleErrors({\n  anyErrorActionCreator: () =>\n    delayError({ error: 'Ошибка соединения', time: 5000 }),\n})(function*() {\n  const token = yield select(getToken)\n  const posts = yield call(PostsManager.getPosts, token)\n  yield put(setPosts(posts))\n})\n\nconst removePost = handleErrors({\n  anyErrorActionCreator: () =>\n    delayError({ error: 'Ошибка соединения', time: 5000 }),\n})(function*({ payload: id }) {\n  const token = yield select(getToken)\n  yield call(PostsManager.removePost, token, id)\n  const posts = yield call(PostsManager.getPosts, token)\n  yield put(setPosts(posts))\n})\n\nconst createPost = handleErrors({\n  badRequestActionCreator: R.pipe(\n    x => ({ ...x, file: x.mimetype }),\n    errors => stopSubmit(FORMS.POST, errors),\n  ),\n})(function*({ payload: post }) {\n  const token = yield select(getToken)\n\n  yield call(PostsManager.savePost, token, createPostFormData(post))\n  const posts = yield call(PostsManager.getPosts, token)\n  yield put(setPosts(posts))\n})\n\nconst updatePost = handleErrors({\n  badRequestActionCreator: R.pipe(\n    x => ({ ...x, file: x.mimetype }),\n    errors => stopSubmit(FORMS.POST, errors),\n  ),\n})(function*({ payload: post }) {\n  const token = yield select(getToken)\n\n  yield put(startSubmit(FORMS.POST))\n  yield call(PostsManager.updatePost, token, createPostFormData(post))\n  const posts = yield call(PostsManager.getPosts, token)\n  yield put(setPosts(posts))\n  yield put(stopSubmit(FORMS.POST))\n})\n\nconst posts = function*() {\n  yield all([\n    takeLatest(REQUEST_POSTS, requestPosts),\n    takeLatest(REMOVE_POST, removePost),\n    takeLatest(CREATE_POST, createPost),\n    takeLatest(UPDATE_POST, updatePost),\n  ])\n}\n\nexport default posts\n"]},"metadata":{},"sourceType":"module"}